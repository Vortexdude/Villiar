#!/usr/bin/env bash

#set -ex

CURDIR=$(cd $(dirname $0) && pwd)
PKG_DIR_PATH=$(cd $CURDIR/../ && pwd)
export PACKAGE_NAME=$(basename $(realpath $PKG_DIR_PATH))
secret_file="${PKG_DIR_PATH}/.secrets"
secret_env_file="${PKG_DIR_PATH}/.env"
private_key="${PKG_DIR_PATH}/files/privkey-ID.pem"
public_key="${PKG_DIR_PATH}/files/pubkey-Id.pem"
docker_file="${PKG_DIR_PATH}/Dockerfile"
docker_compose_file="${PKG_DIR_PATH}/docker-compose.yml"
docker_compose_overwrite="${PKG_DIR_PATH}/docker-compose.override.yml"
container_name=$(cut -d "-" -f3- <<< "${PACKAGE_NAME}")
docker_exec_cmd="docker exec -it"
source "$CURDIR/utils"

argparse "$@"

#encrypt_data $secret_env_file $public_key $secret_file
decrypted_data=$(decrypt_data $secret_file $private_key)
data_parser $decrypted_data

print_info

#docker exec Viliar-db psql -U viliar -c "create schema public;"

case "$ACTION" in
  start)
    echo "Starting continuous integration . . . "
    docker compose -f $docker_compose_file -f $docker_compose_overwrite\
    up --remove-orphans --build -d
    ;;
  stop)
    echo "Stopping the container"
    docker compose -f $docker_compose_file -f $docker_compose_overwrite\
    down --remove-orphans
    ;;
  connect)
    echo "Connecting the container $container_name - "
    ${docker_exec_cmd} ${container_name} /bin/bash
    ;;
  run)
    echo "Running  the container"
    ;;
  restart)
    echo "Restarting docker containers"
    docker compose restart
    ;;
  destroy)
    echo "Stopping the container"
    docker compose -f $docker_compose_file -f $docker_compose_overwrite\
    down --remove-orphans
    echo "Removing old postgres volume"
    volume_name=$(docker volume ls | awk -F' ' '/postgres/ {print $2}')
    docker volume rm $volume_name
    ;;
  *)
    echo "Unknown arg..."
    ;;
esac
